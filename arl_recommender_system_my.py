# -*- coding: utf-8 -*-
"""ARL_Recommender_System_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PvUsWjC4WQfz5BpD-yxEV8ExwXXWw6tp
"""

!pip install openpyxl

#import operations
import pandas as pd
pd.set_option("display.max_rows",None)
pd.set_option("display.max_columns",None)
pd.set_option("display.width",500)
pd.set_option("display.expand_frame_repr",False)
from mlxtend.frequent_patterns import apriori, association_rules

# Read the 2010-2011 sheet from the Online Retail II dataset.
df_=pd.read_excel("/content/online_retail_II_bonus.xlsx",sheet_name="Year 2010-2011")
df=df_.copy()
df.head()

# Perform preprocessing for the online retail II dataset.

def outlier_theresholds(dataframe,variable):
    quartile1=dataframe[variable].quantile(0.01)
    quartile3=dataframe[variable].quantile(0.99)
    interquantile_range= quartile3 - quartile1
    up_limit=quartile3 + 1.5 * interquantile_range
    low_limit=quartile1 - 1.5 * interquantile_range
    return up_limit, low_limit

def replace_with_threshold(dataframe,variable):
    up_limit, low_limit = outlier_theresholds(dataframe,variable)
    dataframe.loc[(dataframe[variable]>up_limit),variable]=up_limit
    dataframe.loc[(dataframe[variable]<low_limit),variable]=low_limit

def retail_data_prep(dataframe):
    dataframe.dropna(inplace=True)
    dataframe=dataframe[~dataframe["Invoice"].astype(str).str.contains("C",na=False)]
    dataframe=dataframe[dataframe["Quantity"]>0]
    dataframe=dataframe[dataframe["Price"]>0]
    replace_with_threshold(dataframe,"Quantity") #dikkat et
    replace_with_threshold(dataframe,"Price")   #dikkat et
    return dataframe

df=retail_data_prep(df)
df.isnull().sum()

#Produce Association Rules through Germany Customers
df_ger=df[df["Country"]=="Germany"]

df_ger.groupby(["Invoice","Description"]).\
    agg({"Quantity":"sum"}).\
    unstack().fillna(0).\
    applymap(lambda x : 1 if x>0 else 0).iloc[0:5,0:5]

def create_invoice_product_df(dataframe, id=False):
    if id:
        return dataframe.groupby(["Invoice","StockCode"]).agg({"Quantity":"sum"}).unstack().fillna(0).applymap(lambda x:1 if x>0 else 0).iloc[0:5,0:5]
    else:
        return dataframe.groupby(["Invoice","Description"]).agg({"Quantity":"sum"}).unstack().fillna(0).applymap(lambda x:1 if x>0 else 0).iloc[0:5,0:5]
ger_inv_pro_df=create_invoice_product_df(df_ger,id=True)

#What are the names of the products whose IDs are given?
def check_id(dataframe,stock_code):
    product_name=dataframe[dataframe["StockCode"]==stock_code][["Description"]].values[0].tolist()
    print(product_name)

check_id(df_ger,10002)

frequent_itemsets = apriori(ger_inv_pro_df,
                            min_support=0.01,
                            use_colnames=True)

frequent_itemsets.sort_values("support", ascending=False)

def create_rules(dataframe, id=True, country="France"):
    dataframe = dataframe[dataframe['Country'] == country]
    dataframe = create_invoice_product_df(dataframe, id)
    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric="support", min_threshold=0.01)
    return rules
rules = create_rules(df)

rules.head()

def outlier_thresholds(dataframe, variable):
    quartile1 = dataframe[variable].quantile(0.01)#10
    quartile3 = dataframe[variable].quantile(0.99)#30
    interquantile_range = quartile3 - quartile1#20
    up_limit = quartile3 + 1.5 * interquantile_range#30+30=60
    low_limit = quartile1 - 1.5 * interquantile_range#10-30=-20=10
    return low_limit, up_limit
def replace_with_thresholds(dataframe, variable):
    low_limit, up_limit = outlier_thresholds(dataframe, variable)
    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit
    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit
def retail_data_prep(dataframe):
    dataframe.dropna(inplace=True)
    dataframe = dataframe[~dataframe["Invoice"].astype(str).str.contains("C", na=False)]
    dataframe = dataframe[dataframe["Quantity"] > 0]
    dataframe = dataframe[dataframe["Price"] > 0]
    replace_with_thresholds(dataframe, "Quantity")
    replace_with_thresholds(dataframe, "Price")
    return dataframe
def check_df(dataframe, head=5):
    print ("##################### Shape #####################")
    print (dataframe.shape)
    print ("##################### Types #####################")
    print (dataframe.dtypes)
    print ("##################### Head #####################")
    print (dataframe.head (head))
    print ("##################### Tail #####################")
    print (dataframe.tail (head))
    print ("##################### NA #####################")
    print (dataframe.isnull ().sum ())
    print ("##################### Quantiles #####################")
    print (dataframe.quantile ([0, 0.05, 0.50, 0.95, 0.99, 1]).T)

check_df(df)

df = retail_data_prep(df)

def create_invoice_product_df(dataframe, id=False):
    if id:
        return dataframe.groupby(['Invoice', "StockCode"])['Quantity'].sum().unstack().fillna(0). \
            applymap(lambda x: 1 if x > 0 else 0)
    else:
        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \
            applymap(lambda x: 1 if x > 0 else 0)

def create_rules(dataframe, id=True, country="Germany"):
    dataframe = dataframe[dataframe['Country'] == country]
    dataframe = create_invoice_product_df(dataframe, id)
    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric="support", min_threshold=0.01)
    return rules

rules=create_rules(df)

rules

def check_id(dataframe, stock_code):
    product_name = dataframe[dataframe["StockCode"] == stock_code][["Description"]].values[0].tolist()
    print(product_name)

df[df["StockCode"] == 21987][["Description"]].values[0].tolist()


for i in [21987,23235,22747]:
    check_id(df, i)

#Sepetteki Kullanıcılar için Ürün Önerisi Yapınız
def arl_recommender(rules_df, product_id, rec_count=1):
    sorted_rules = rules_df.sort_values("lift", ascending=False)
    recommendation_list = []
    for i, product in enumerate(sorted_rules["antecedents"]):
        for j in list(product):
            if j == product_id:
                recommendation_list.append(list(sorted_rules.iloc[i]["consequents"])[0])

    return recommendation_list[0:rec_count]
arl_recommender(rules, 21987, 3)
arl_recommender(rules,23235,1)
arl_recommender(rules,22747,1)




